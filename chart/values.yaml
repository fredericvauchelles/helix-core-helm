imagePullSecrets: []
  # - name: "image-pull-secret"

## Helix-Core server
##
helixCore:
  ## Image for Helix-Core
  image:
    repository: fredericvauchelles/helix-core
    tag: 2019.1
    pullPolicy: IfNotPresent

  ## Annotations to be added to deployment
  ##
  deploymentAnnotations: {}

  ## Server Deployment Strategy type
  strategy:
    type: Recreate

  ## Number of replicas for Helix-Core server
  ##
  replicaCount: 1

  ## Helix-Core server resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources: {}

  ## Node labels for Helix-Core server pod assignment
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}

  ## Annotations to be added to Helix-Core server pods
  ##
  podAnnotations: {}
  
  ## Labels to be added to Helix-Core server pods
  ##
  podLabels: {}

  ## Node tolerations for server scheduling to nodes with taints
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  ##
  tolerations: []

  ## Pod affinity
  ##
  affinity: {}

  ## Service for Helix-Core server
  ##
  service:
    ## Create a service for Helix-Core server
    ##
    enabled: true

    annotation: {}
    labels: {}
    clusterIP: ""

    ## List of IP addresses at which the Helix-Core server service is available
    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
    ##
    externalIPs: []

    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    port: 1666
    sessionAffinity: None
    type: ClusterIP

  ## Persistence for the Helix-Core server
  ##
  persistentVolume:
    ## If true, Helix-Core server will create/use a Persistent Volume Claim
    ## If false, use emptyDir
    ##
    enabled: false

    ## Helix-Core server data Persistent Volume access modes
    ## Must match those of existing PV or dynamic provisioner
    ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    accessModes:
      - ReadWriteOnce

    ## Helix-Core server data Persistent Volume labels
    ##
    labels: {}

    ## Helix-Core server data Persistent Volume annotations
    ##
    annotations: {}

    ## Helix-Core server data Persistent Volume existing claim name
    ## Requires helixCore.persistentVolume.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    existingClaim: ""

    ## Helix-Core server data Persistent Volume size
    ##
    size: 50Gi

    ## Helix-Core server data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

    ## Helix-Core server data Persistent Volume Binding Mode
    ## If defined, volumeBindingMode: <volumeBindingMode>
    ## If undefined (the default) or set to null, no volumeBindingMode spec is
    ##   set, choosing the default mode.
    ##
    # volumeBindingMode: ""

    ## Persistent Volume Claim Selector
    ## Useful if Persistent Volumes have been provisioned in advance
    ## Ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#selector
    ##
    # selector:
    #  matchLabels:
    #    release: "stable"
    #  matchExpressions:
    #    - { key: environment, operator: In, values: [ dev ] }

    ## Persistent Volume Name
    ## Useful if Persistent Volumes have been provisioned in advance and you want to use a specific one
    ##
    # volumeName: ""

    ## EmptyDir configuration when Helix-Core does not use a PVC
    ## see helixCore.persistentVolume.enabled
    emptyDir:
      ## Helix-Core server emptyDir volume size limit
      ##
      sizeLimit: ""

  ## Credential to use for p4admin
  ##
  p4admin:
    ## Create a secret with `superusername` and `superpassword`
    ## The default values match the default values of the Docker file so
    ## you can boot a fresh instance
    create-secret: true
    
    ## Username for p4admin
    ##
    superusername: p4admin

    ## Password for p4admin
    ##
    superpassword: pass12349ers!

    ## if defined, this secret will be used, otherwise it will use the
    ## generated secret with above parameters
    ##
    ## It will expect to have 2 keys: `superusername` and `superpassword`
    existing-secret: ""

## LDAP synchronization service
## This creates a deployment that synchronize groups from LDAP with users
## in Helix-Core
##
## see https://www.perforce.com/manuals/p4sag/Content/P4SAG/security.ldap.html
ldapsync:
  ## Schedule cronjobs to execute ldapsync
  ##
  sync: []
  ##  LDAP Group to sync
  ##
  # - groups: group1 group2
  
  ##  Interval (seconds) between each sync
  ##
  #   interval: 300
  
  ##  Deployment labels
  ##
  #   labels: {}
  
  ##  Deployment annotations
  ##
  #   annotations: {}

  ##  Pod labels
  ##
  #   podLabels: {}

  ##  Pod annotations
  ##
  #   podAnnotations: {}
